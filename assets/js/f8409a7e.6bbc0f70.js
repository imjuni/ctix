"use strict";(self.webpackChunkctix_docs=self.webpackChunkctix_docs||[]).push([[206],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>g});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),s=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},m=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=s(a),u=r,g=c["".concat(p,".").concat(u)]||c[u]||d[u]||i;return a?n.createElement(g,l(l({ref:e},m),{},{components:a})):n.createElement(g,l({ref:e},m))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[c]="string"==typeof t?t:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9568:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1,title:"ctix",slug:"/"},l=void 0,o={unversionedId:"intro",id:"intro",title:"ctix",description:"Download Status Github Star Github Issues NPM version License ctix codecov",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/ctix/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"ctix",slug:"/"},sidebar:"tutorialSidebar",next:{title:"Migration Guide",permalink:"/ctix/extra/migration-guilde"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Why ctix?",id:"why-ctix",level:2},{value:"Important",id:"important",level:2},{value:"How to works?",id:"how-to-works",level:2},{value:"Use ctix with Non TypeScript files",id:"use-ctix-with-non-typescript-files",level:2},{value:"Fonts",id:"fonts",level:3},{value:"Vue.js",id:"vuejs",level:3},{value:"Pros &amp; Cons",id:"pros--cons",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3},{value:"What is difference Re-Map paths?",id:"what-is-difference-re-map-paths",level:2},{value:"Option",id:"option",level:2},{value:"Ignore",id:"ignore",level:2},{value:".ctiignore",id:"ctiignore",level:3},{value:"Partial Ignore glob pattern (higher v1.6.x)",id:"partial-ignore-glob-pattern-higher-v16x",level:3},{value:"ignore testcase",id:"ignore-testcase",level:3},{value:"rootDir, rootDirs",id:"rootdir-rootdirs",level:3},{value:"CLI with .ctirc",id:"cli-with-ctirc",level:2},{value:".ctirc creation",id:"ctirc-creation",level:2},{value:"Breaking Change",id:"breaking-change",level:2},{value:"Programming interface",id:"programming-interface",level:2}],m={toc:s};function c(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://npmcharts.com/compare/ctix?minimal=true"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/dw/ctix.svg",alt:"Download Status"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/imjuni/ctix.svg?style=popout",alt:"Github Star"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix/issues"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/issues-raw/imjuni/ctix.svg",alt:"Github Issues"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/ctix"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/ctix.svg",alt:"NPM version"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix/blob/master/LICENSE"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/l/ctix.svg",alt:"License"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix/actions/workflows/ci.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/imjuni/ctix/actions/workflows/ci.yml/badge.svg",alt:"ctix"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://codecov.io/gh/imjuni/ctix"},(0,r.kt)("img",{parentName:"a",src:"https://codecov.io/gh/imjuni/ctix/branch/master/graph/badge.svg?token=DADV7ss5bh",alt:"codecov"}))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i ctix --save-dev\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ctix create -p ./tsconfig.json\n")),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"You have to create a list of files when bundling with ",(0,r.kt)("a",{parentName:"p",href:"https://webpack.js.org/"},"webpack")," and ",(0,r.kt)("a",{parentName:"p",href:"https://rollupjs.org/guide/en/"},"rollup.js"),", or creating documents with ",(0,r.kt)("a",{parentName:"p",href:"https://typedoc.org/"},"typedoc"),". It's boring to re-list files every time they change files change. ctix is a simple tool that automates the creation of file lists."),(0,r.kt)("h2",{id:"why-ctix"},"Why ctix?"),(0,r.kt)("p",null,"An application project has a clear ",(0,r.kt)("a",{parentName:"p",href:"https://webpack.js.org/concepts/entry-points/"},"entry point"),", but if it is a library project, the entry point is not clear, so you have to create it yourself. typedoc have to explicitly specify what to document, even for an application project."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"use TypeScript compiler API"),(0,r.kt)("li",{parentName:"ol"},"create index.ts file by separating default export and export"),(0,r.kt)("li",{parentName:"ol"},"support isolatedModules option"),(0,r.kt)("li",{parentName:"ol"},"various ignore options such as gitignore, npmignore, citignore")),(0,r.kt)("h2",{id:"important"},"Important"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ctix")," does not work in JavaScript code because it uses TypeScript API, please use it ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"before"))," Babel translation or TypeScript compilation."),(0,r.kt)("h2",{id:"how-to-works"},"How to works?"),(0,r.kt)("p",null,"ctix use TypeScript Compiler API and directory structure. Export something from TypeScript source file after run ctix to create ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," file. Detail working see ",(0,r.kt)("a",{parentName:"p",href:"https://imjuni.github.io/ctix/#how-to-works"},"here")),(0,r.kt)("h2",{id:"use-ctix-with-non-typescript-files"},"Use ctix with Non TypeScript files"),(0,r.kt)("h3",{id:"fonts"},"Fonts"),(0,r.kt)("p",null,"webpack, rollup.js bundling fonts like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix/tree/master/example/type08"},"that"),". You can create ",(0,r.kt)("inlineCode",{parentName:"p"},".d.ts")," file and include it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// @types/DeclareTtfModule.d.ts\ndeclare module '*.ttf';\n\n// fonts/fonts.ts\n/// <reference path=\"../@types/DeclareTtfModule.d.ts\" />\nimport Friend from 'Friend.ttf';\nimport AlsoFriend from './fonts/AlsoFriend.ttf';\n\nexport { Friend, AlsoFriend };\n")),(0,r.kt)("h3",{id:"vuejs"},"Vue.js"),(0,r.kt)("p",null,"If you use vue.js framework, you can use it as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// @types/vue.d.ts\ndeclare module '*.vue' {\n  import Vue from 'vue';\n  export default Vue;\n}\n\n// components/vue-components.ts\n/// <reference path=\"../@types/vue.d.ts\" />\nimport Foo from 'Foo.vue';\nimport Bar from './Bar.vue';\n\nexport { Foo, Bar };\n")),(0,r.kt)("h2",{id:"pros--cons"},"Pros & Cons"),(0,r.kt)("h3",{id:"pros"},"Pros"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"pass tsconfig.json file, another process don't care about"),(0,r.kt)("li",{parentName:"ol"},"Support default exportation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"using TypeScript API so detect default export and named export"),(0,r.kt)("li",{parentName:"ul"},"my_default_index.test.ts file create ",(0,r.kt)("inlineCode",{parentName:"li"},"export { default as myDefaultIndexTest } from './my_default_index.test.ts'")))),(0,r.kt)("li",{parentName:"ol"},"Partial ignore",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"specific export statement exclude on index.ts file."),(0,r.kt)("li",{parentName:"ul"},"eg. ",(0,r.kt)("inlineCode",{parentName:"li"},'{ "my_lib_package.ts": ["exists", "temp"] }')))),(0,r.kt)("li",{parentName:"ol"},"Skip empty directory"),(0,r.kt)("li",{parentName:"ol"},"isolatedModules support")),(0,r.kt)("h3",{id:"cons"},"Cons"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"It may be slow for some project",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"since ctix uses TypeScript compiler API, big projects may take time to generate index files")))),(0,r.kt)("h2",{id:"what-is-difference-re-map-paths"},"What is difference Re-Map paths?"),(0,r.kt)("p",null,"It is not recommended to use ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," file to re-map paths or shorten the paths. If you want to shorten the paths use ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#paths"},"Re-Map paths")," feature in TypeScript compilerOptions. ",(0,r.kt)("inlineCode",{parentName:"p"},"ctix")," is recommended for webpack and rollup.js, typedoc entrypoint and TypeScript declaration file bundling."),(0,r.kt)("h2",{id:"option"},"Option"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Short"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Command"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--config"),(0,r.kt)("td",{parentName:"tr",align:null},"-c"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null},"configuration file(.ctirc) path")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--project"),(0,r.kt)("td",{parentName:"tr",align:null},"-p"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null},'tsconfig.json path: you must pass path with filename, like this "./tsconfig.json"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--spinnerStream"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"stdout"),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null},"Stream of cli spinner, you can pass stdout or stderr")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--progressStream"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"stdout"),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null},"Stream of cli progress, you can pass stdout or stderr")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--reasonerStream"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"stderr"),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null},"Stream of cli reasoner. Reasoner show name conflict error and already exist index.ts file error. You can pass stdout or stderr")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--startAt"),(0,r.kt)("td",{parentName:"tr",align:null},"-a"),(0,r.kt)("td",{parentName:"tr",align:null},"= --project"),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null},"start working from startAt directory. If you do not pass startAt use project directory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--exportFilename"),(0,r.kt)("td",{parentName:"tr",align:null},"-f"),(0,r.kt)("td",{parentName:"tr",align:null},"index.ts"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single, remove"),(0,r.kt)("td",{parentName:"tr",align:null},'Export filename, if you not pass this field that use "index.ts" or "index.d.ts"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--useSemicolon"),(0,r.kt)("td",{parentName:"tr",align:null},"-s"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"add semicolon on line ending at every export statement")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--useTimestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"-t"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"timestamp write on ctix comment right-side, only works in useComment option set true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--useComment"),(0,r.kt)("td",{parentName:"tr",align:null},"-m"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"ctix comment add on first line of created export file(default index.ts) file, that remark created from ctix")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--quote"),(0,r.kt)("td",{parentName:"tr",align:null},"-q"),(0,r.kt)("td",{parentName:"tr",align:null},"'"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"change quote character at export syntax")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--keepFileExt"),(0,r.kt)("td",{parentName:"tr",align:null},"-k"),(0,r.kt)("td",{parentName:"tr",align:null},"'"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"keep file extension on export statement path literal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--overwrite"),(0,r.kt)("td",{parentName:"tr",align:null},"-w"),(0,r.kt)("td",{parentName:"tr",align:null},"'"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"overwrite each index.ts file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--ignoreFile"),(0,r.kt)("td",{parentName:"tr",align:null},"-g"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"ignore file name. You can pass ignore, config file at ctix and use it like profile")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--noBackup"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"create, single"),(0,r.kt)("td",{parentName:"tr",align:null},"not create backup file even if set overwrite option enable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--skipEmptyDir"),(0,r.kt)("td",{parentName:"tr",align:null},"-e"),(0,r.kt)("td",{parentName:"tr",align:null},"'"),(0,r.kt)("td",{parentName:"tr",align:null},"create"),(0,r.kt)("td",{parentName:"tr",align:null},"empty directory skip create index.ts file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--output"),(0,r.kt)("td",{parentName:"tr",align:null},"-o"),(0,r.kt)("td",{parentName:"tr",align:null},"N/A"),(0,r.kt)("td",{parentName:"tr",align:null},"single"),(0,r.kt)("td",{parentName:"tr",align:null},"output directory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--useRootDir"),(0,r.kt)("td",{parentName:"tr",align:null},"-r"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"single"),(0,r.kt)("td",{parentName:"tr",align:null},"output file under rootDir in tsconfig.json.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"--includeBackup"),(0,r.kt)("td",{parentName:"tr",align:null},"-b"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"remove"),(0,r.kt)("td",{parentName:"tr",align:null},"If this option set true on remove mode what will be delete backup file.")))),(0,r.kt)("h2",{id:"ignore"},"Ignore"),(0,r.kt)("p",null,"Ignore file 3 way belows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".gitignore")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".npmignore")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".ctiignore"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".gitignore")," file follow ",(0,r.kt)("a",{parentName:"p",href:"http://git-scm.com/docs/gitignore"},".gitignore spec 2.22.1"),". ",(0,r.kt)("inlineCode",{parentName:"p"},".ctiignore")," file key follow ",(0,r.kt)("a",{parentName:"p",href:"http://git-scm.com/docs/gitignore"},".gitignore spec 2.22.1"),". ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore spec 2.22.")," spec using by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kaelzhang/node-ignore"},"ignore")," package. ",(0,r.kt)("inlineCode",{parentName:"p"},".npmignore")," spec using by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/isaacs/minimatch"},"minimatch")),(0,r.kt)("h3",{id:"ctiignore"},".ctiignore"),(0,r.kt)("p",null,".ctiignore file is json with comments. See below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "juvenile/**": "*",\n  "wellmade/FlakyCls.ts": "*",\n  "wellmade/WhisperingCls.ts": "*",\n  "wellmade/ChildlikeCls.ts": ["transfer", "stomach"]\n}\n')),(0,r.kt)("p",null,"json key indicate ignore file path. You can use glob pattern like ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore"),". If set ",(0,r.kt)("inlineCode",{parentName:"p"},"'*'")," character at value that is totally ignore file or glob pattern. If set string array that is ignore type name array."),(0,r.kt)("h3",{id:"partial-ignore-glob-pattern-higher-v16x"},"Partial Ignore glob pattern (higher v1.6.x)"),(0,r.kt)("p",null,"You can use glob pattern in partial ignore like that. Partial ignore follow ",(0,r.kt)("a",{parentName:"p",href:"http://git-scm.com/docs/gitignore"},".gitignore spec 2.22.1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "case00?.ts": ["*Case00*"]\n}\n')),(0,r.kt)("h3",{id:"ignore-testcase"},"ignore testcase"),(0,r.kt)("p",null,"testcase directory ignore using glob pattern."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // ignore testcase file\n  "**/__tests__/*": "*"\n}\n')),(0,r.kt)("p",null,"The testcase file is ignored if you add to the ignore file or if there is no export syntax."),(0,r.kt)("h3",{id:"rootdir-rootdirs"},"rootDir, rootDirs"),(0,r.kt)("p",null,"useRootDir option activate using rootDir option in tsconfig.json. This option run below ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix/blob/master/docs/UseRootDir.md"},"flowchart"),"."),(0,r.kt)("h2",{id:"cli-with-ctirc"},"CLI with .ctirc"),(0,r.kt)("p",null,"ctix cli support ",(0,r.kt)("inlineCode",{parentName:"p"},".ctirc")," configuration file. Available name is only ",(0,r.kt)("inlineCode",{parentName:"p"},".ctirc"),". Also cti cli arguments forced applied. And ",(0,r.kt)("inlineCode",{parentName:"p"},".ctirc")," file can write ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jsonc-parser"},"json with comments"),"."),(0,r.kt)("h2",{id:"ctirc-creation"},".ctirc creation"),(0,r.kt)("p",null,"You can use cli for ",(0,r.kt)("inlineCode",{parentName:"p"},".ctirc")," file creation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create current directory\n> cti init\n\n# pass tsconfig.json path\n> cti init -p ./server/tsconfig.json\n")),(0,r.kt)("h2",{id:"breaking-change"},"Breaking Change"),(0,r.kt)("p",null,"0.6.x and 1.x version big different. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/ctix/blob/master/docs/MigrationGuide.md"},"migration guide"),". cli command, option, ignore file changed. Support TypeScript ",(0,r.kt)("inlineCode",{parentName:"p"},"4.7.2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"new file extensions(.mts, .cts, etc)"),"."),(0,r.kt)("h2",{id:"programming-interface"},"Programming interface"),(0,r.kt)("p",null,"Each command can use that function. Each function can pass isMessageDisplay flag second parameter. isMessageDisplay pass false or undefined after not display console message and progress."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Function"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,r.kt)("th",{parentName:"tr",align:"center"},"command"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"createWritor"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TCreateOptionWithDirInfo, isMessageDisplay"),(0,r.kt)("td",{parentName:"tr",align:"center"},"create")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"singleWritor"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TSingleOptionWithDirInfo, isMessageDisplay"),(0,r.kt)("td",{parentName:"tr",align:"center"},"single")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"removeIndexFile"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TRemoveOptionWithDirInfo, isMessageDisplay"),(0,r.kt)("td",{parentName:"tr",align:"center"},"remove")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"createInitFile"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TTInitOptionWithDirInfo, isMessageDisplay"),(0,r.kt)("td",{parentName:"tr",align:"center"},"init")))))}c.isMDXComponent=!0}}]);